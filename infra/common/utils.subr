kv_create() {
    ## Create SP for Key Vault Access
    KV_NAME=$(cat ./outputs/$RG_NAME-bicep-outputs.json | jq -r .keyvaultName.value)
    echo "Key Vault: $KV_NAME"
    echo "Create SP for KV use..."
    az ad sp create-for-rbac --name "http://sp-$RG_NAME.microsoft.com" --create-cert --cert $RG_NAME-cert --keyvault $KV_NAME --skip-assignment --years 1
    ## Get SP APP ID
    echo "Getting SP_APPID ..."
    SP_INFO=$(az ad sp list -o json --display-name "http://sp-$RG_NAME.microsoft.com")
    SP_APPID=$(echo $SP_INFO | jq -r .[].appId)
    echo "AKV SP_APPID: $SP_APPID"
    ## Get SP Object ID
    echo "Getting SP_OBJECTID ..."
    SP_OBJECTID=$(echo $SP_INFO | jq -r .[].objectId)
    echo "AKV SP_OBJECTID: $SP_OBJECTID"
    # Assign SP to KV with GET permissions
    az keyvault set-policy --name $KV_NAME --object-id $SP_OBJECTID --secret-permissions get
    az keyvault secret download --vault-name $KV_NAME --name $RG_NAME-cert --encoding base64 --file $SSH_KEY_PATH/kv-$RG_NAME-cert.pfx
}

create_redddog() {
    kubectl create ns reddog-retail
    kubectl create secret generic -n reddog-retail reddog.secretstore --from-file=secretstore-cert=kv-$RG_NAME-cert.pfx --from-literal=vaultName=$KV_NAME --from-literal=spnClientId=$SP_APPID --from-literal=spnTenantId=$TENANT_ID
    kubectl create secret generic -n reddog-retail reddog.secretstore --from-file=secretstore-cert=kv-br2-reddog-corp-eastus-cert.pfx --from-literal=vaultName=$KV_NAME --from-literal=spnClientId=$SP_APPID --from-literal=spnTenantId=$TENANT_ID
}

# Zipkin
create_zipkin() {
    kubectl create ns zipkin
    kubectl create deployment zipkin -n zipkin --image openzipkin/zipkin
    kubectl expose deployment zipkin -n zipkin --type LoadBalancer --port 9411
}

kv_add_secrets() {
    #blob-storage-key
    #cosmos-primary-rw-key
    #cosmos-uri
    #sb-root-connectionstring
    #reddog-sql 
    echo "adding Key Vault Secrets"
}

sql_allow_firewall(){
    #sql server must set firewall to allow azure services
    echo "allowing firewall"
}

aks_connect_cluster(){
    export AKSNAME=br2-hub-aks
    az connectedk8s connect -g $RG_NAME -n $AKSNAME --distribution aks
}

k8s_configuration_create() {
    local _target
    local _manifest_path

    # checks if we are creating hubs or branches
    if [[ ${_target}} == "hub" ]]; then
        ${_manifest_path} = "corp"
        ${AKSNAME} = 
    else
        ${_manifest_path} = "branch"
    fi

    az k8s-configuration create --name $RG_NAME-hub-deps \
        --cluster-name $AKSNAME \
        --resource-group $RG_NAME \
        --scope cluster \
        --cluster-type connectedClusters \
        --operator-instance-name flux \
        --operator-namespace flux \
        --operator-params="--git-readonly --git-path=manifests/corporate/dependencies --git-branch=main --manifest-generation=true" \
        --enable-helm-operator \
        --helm-operator-params='--set helm.versions=v3' \
        --repository-url git@github.com:Azure/reddog-retail-demo.git \
        --ssh-private-key "$(cat arc-priv-key-b64)"

    az k8s-configuration create --name $RG_NAME-hub-base \
        --cluster-name $AKSNAME \
        --resource-group $RG_NAME \
        --scope namespace \
        --cluster-type connectedClusters \
        --operator-instance-name base \
        --operator-namespace reddog-retail \
        --operator-params="--git-readonly --git-path=manifests/corporate/base --git-branch=main --manifest-generation=true" \
        --repository-url git@github.com:Azure/reddog-retail-demo.git \
        --ssh-private-key "$(cat arc-priv-key-b64)"
}